<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Winds_Trader"
   author="Areia"
   id="cfb5131348f00eca0684adce"
   language="Lua"
   purpose="Trade Winds cards"
   save_state="n"
   date_written="2021-11-08 12:00:00"
   requires="5.06"
   version="0.0"
   >
<description trim="y">
<![CDATA[
]]>
</description>

</plugin>

<include name="constants.lua"/>



<aliases>
</aliases>



<triggers>
</triggers>



<script>
<![CDATA[
require "commas"
require "copytable"
require "gmcphelper"
require "serialize"
require "tprint"
require "var"
require "wait"
dofile(GetInfo(60) .. "aardwolf_colors.lua")
dofile(GetInfo(60) .. "telnet_options.lua")



--------------------------------------------------
-- Config
--------------------------------------------------

Config = {}

function Config.initialize()
    Config.load()
end

function Config.default()
    local data = {
        ["created"] = false,
    }
    return serialize.save_simple(data)
end

function Config.load()
    local strvar = var.config or Config.default()
    local data = loadstring("return " .. strvar)()
    Config.data = data
end

function Config.save()
    var.config = serialize.save_simple(Config.data)
end

function Config.get(key)
    return Config.data[key]
end

function Config.set(key, val)
    Config.data[key] = val
    Config.save()
end
]]>
</script>



<aliases>
    <alias
     match="^winds\s+upload\s+case(?<keyword>.*)$"
     enabled="y"
     script="Inv.identify"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^winds\s+upload\s+cards(?<location>.*)$"
     enabled="y"
     script="Inv.inventory"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>

<triggers>
    <trigger
     name="trigger_inv_case_start"
     match="^You have (?:the following|no) cards stored[:.]$"
     enabled="n"
     script="Inv.case_start"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="triggerg_inv_case"
     match="^\|\s+Keywords\s+:(?<keywords>.+)\|$"
     enabled="n"
     script="Inv.case_keywords"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="triggerg_inv_case"
     match="^\|\s+Id\s+:(?<id>.+)\|$"
     enabled="n"
     script="Inv.case_id"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     name="trigger_inv_case_end"
     group="triggerg_inv_case"
     match="^\{/id\}$"
     enabled="n"
     script="Inv.case_end"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    >
    </trigger>
    
    <trigger
     name="trigger_inv_cards_start"
     group="triggerg_inv_cards"
     match="^(?:You are carrying|The .+ contains):$"
     enabled="n"
     script="Inv.cards_start"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     name="trigger_inv_cards_card"
     group="triggerg_inv_cards"
     match="^(?:\(\s*(?<count>\d+)\))?(?:\s+\([a-zA-Z ()]+\)) (?<name>\w+) Fantasy Series Collector's Card(?: \(201\))?$"
     enabled="n"
     script="Inv.cards_card"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     name="trigger_inv_cards_end"
     group="triggerg_inv_cards"
     match="^\{/inv\}$"
     enabled="n"
     script="Inv.cards_end"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    >
    </trigger>
</triggers>

<script>
<![CDATA[
--------------------------------------------------
-- Inv
--------------------------------------------------

Inv = {}

function Inv.initialize()
    Inv.clear_data()
end

function Inv.clear_data()
    Inv.case = {}
    Inv.cards = {}
end

function Inv.identify(alias, line, wc)
    local keyword = trim(wc.keyword)
    if (keyword == "") then
        Utility.msg_prim("Upload what case?")
        return
    end
    
    Inv.clear_data()
    EnableTrigger("trigger_inv_case_start", true)
    EnableTrigger("trigger_inv_case_end", true)
    SendNoEcho("identify " .. keyword)
    -- Rezit decided to add a blank line between stored list and identify output,
    -- so add an ending echo of our own...
SendNoEcho("echo {/id}")
end

function Inv.case_start(trigger, line, wc)
    EnableTrigger("trigger_inv_case_start", false)
    EnableTriggerGroup("triggerg_inv_case", true)
end

function Inv.case_keywords(trigger, line, wc)
    Inv.case.keywords = trim(wc.keywords)
end

function Inv.case_id(trigger, line, wc)
    Inv.case.id = trim(wc.id)
end

function Inv.case_end(trigger, line, wc)
    EnableTrigger("trigger_inv_case_start", false)
    EnableTriggerGroup("triggerg_inv_case", false)
end

function Inv.inventory(alias, line, wc)
    Inv.clear_data()
    local location = trim(wc.location)
    EnableTrigger("trigger_inv_cards_start", true)
    EnableTrigger("trigger_inv_cards_end", true)
    TelnetOptionOff(TELOPT_PAGING) -- Temporarily disable paging if it is on
    if (location == "") then
        SendNoEcho("inventory")
    else
        SendNoEcho("look in " .. location)
    end
    SendNoEcho("echo {/inv}")
    TelnetOptionOn(TELOPT_PAGING) -- Re-enable paging if it was on
end

function Inv.cards_start(trigger, line, wc)
    EnableTrigger("trigger_inv_cards_start", false)
    EnableTrigger("trigger_inv_cards_card", true)
end

function Inv.cards_card(trigger, line, wc)
    local count = tonumber(wc.count) or 1
    local name = wc.name
    for i = 1, count do
        table.insert(Inv.cards, name)
    end
end

function Inv.cards_end(trigger, line, wc)
    EnableTriggerGroup("triggerg_inv_cards", false)
    if (#Inv.cards > 0) then
        table.sort(Inv.cards)
    end
end
]]>
</script>



<script>
<![CDATA[
local https = require "ssl.https"
require "json"
local ltn12 = require "ltn12"
--------------------------------------------------
-- Remote
--------------------------------------------------

Remote = {}

function Remote.initialize()
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- GMCP
--------------------------------------------------

GMCP = {}

function GMCP.char_name()
    return gmcp("char.base.name")
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Utility
--------------------------------------------------

Utility = {}

function Utility.initialize()
    local modules = {
        Config,
        Inv,
        Remote,
    }
    for _, module in ipairs(modules) do
        if (module.initialize) then
            module.initialize()
        end
    end
end

function Utility.deinitialize()
end

function Utility.print(str)
    -- Lets us use Aard color codes in our ColourNotes
    AnsiNote(stylesToANSI(ColoursToStyles(string.format("@w%s@w", str))))
end

function Utility.msg_prim(str, ...)
    Utility.print(string.format("[@YWinds Trader@w]: %s", str))
    for _, msg in ipairs{...} do
        Utility.second_msg(msg)
    end
end

function Utility.msg_sec(str)
    Utility.print(string.format("                %s", str))
end

function Utility.pascal_case(str)
    str = str:gsub("(%a)([%w_']*)",
        function(first,remainder)
            return string.format("%s%s", first:upper(), remainder:lower())
        end
    )
    return str
end

function Utility.starts_with(s, t)
    if not (type(s) == "string" and type(t) == "string") then
        return false
    end
    return s:sub(1, #t) == t
end

function Utility.ends_with(s, t)
    return Utility.starts_with(s:reverse(), t:reverse())
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Plugin Callbacks
--------------------------------------------------

function OnPluginInstall()
    Utility.initialize()
end

function OnPluginEnable()
    OnPluginInstall()
end

function OnPluginClose()
    Utility.deinitialize()
end

function OnPluginDisable()
    OnPluginClose()
end

function OnPluginBroadcast(msg, id, name, text)
    if (id == "3e7dedbe37e44942dd46d264") then
    end
end
]]>
</script>


</muclient>
