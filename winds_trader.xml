<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Winds_Trader"
   author="Areia"
   id="cfb5131348f00eca0684adce"
   language="Lua"
   purpose="Trade Winds cards"
   save_state="y"
   date_written="2021-11-08 12:00:00"
   requires="5.06"
   version="1.10"
   >
<description trim="y">
<![CDATA[
Abbreviated Help:

Type 'winds tradehelp' for main help topics.
Type 'winds upload case' to upload a case in your inventory.
Type 'winds upload cards' to upload dupes in your inventory.
Type 'winds trades 1234' to view all possible trades.
]]>
</description>

</plugin>

<include name="constants.lua"/>



<aliases>
    <alias
     match="^winds\s+config\s+limittrades\s+(?<daysAgo>[0-9-]+)$"
     enabled="y"
     script="Config.set_daysago"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>

<script>
<![CDATA[
require "commas"
require "copytable"
require "gmcphelper"
require "serialize"
require "tprint"
require "var"
require "wait"
dofile(GetInfo(60) .. "aardwolf_colors.lua")
dofile(GetInfo(60) .. "telnet_options.lua")



--------------------------------------------------
-- Config
--------------------------------------------------

Config = {}

function Config.initialize()
    Config.load()
end

function Config.default()
    local data = {
        ["created"] = false,
        ["daysAgo"] = 0,
    }
    return serialize.save_simple(data)
end

function Config.load()
    local strvar = var.config or Config.default()
    local data = loadstring("return " .. strvar)()
    Config.data = data
end

function Config.save()
    var.config = serialize.save_simple(Config.data)
end

function Config.get(key)
    return Config.data[key]
end

function Config.set(key, val)
    Config.data[key] = val
    Config.save()
end

function Config.set_daysago(alias, line, wc)
    local daysAgo = tonumber(wc.daysAgo)
    daysAgo = daysAgo < 1 and 0 or daysAgo
    Config.set("daysAgo", daysAgo)
    if (daysAgo == 0) then
        Utility.msg_prim("Trade search not limited by player activity.")
    elseif (daysAgo == 1) then
        Utility.msg_prim("Trade search limited to players active in the last day.")
    else
        Utility.print(string.format(
            "Trade search limited to players active in the last %d days.",
            daysAgo
        ))
    end
end
]]>
</script>



<aliases>
    <alias
     match="^winds\s+upload\s+cards(?<location>.*)$"
     enabled="y"
     script="CardHandler.search"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^winds\s+remove\s+card(?<card>.*)$"
     enabled="y"
     script="CardHandler.remove"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>

<triggers>
    <trigger
     group="triggerg_card_search"
     match="^(?:\(\s*(?<count>\d+)\))?(?:\s+\([a-zA-Z ()]+\)) (?<name>\w+) Fantasy Series Collector's Card(?: \(201\))?$"
     enabled="n"
     script="CardHandler.found"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="triggerg_card_search"
     match="^\{/cards\}$"
     enabled="n"
     script="CardHandler.search_done"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    >
    </trigger>
</triggers>

<script>
<![CDATA[
--------------------------------------------------
-- Card Handler
--------------------------------------------------

CardHandler = {}

function CardHandler.search(alias, line, wc)
    CardHandler.cards = {}
    
    -- Build up a list of unique keywords to search. If no keywords
    -- at all are given, then search at least the main inventory.
    local locations = {}
    for arg in trim(wc.location):gmatch("%S+") do
        locations[arg:lower()] = true
    end
    if (not next(locations)) then
        locations.inv = true
    end
    
    EnableTriggerGroup("triggerg_card_search", true)
    TelnetOptionOff(TELOPT_PAGING) -- Temporarily disable paging if it is on
    
    -- Examine the contents of each item in the list. First search
    -- for special locations like vault and remove them so as not to
    -- examine them twice. Then 'look in' the remaining elements.
    if (locations.inv or locations.inventory) then
        SendNoEcho("inventory")
        locations.inv = nil
        locations.inventory = nil
    end
    if (locations.vault) then
        SendNoEcho("vault list")
        locations.vault = nil
    end
    for container in pairs(locations) do
        SendNoEcho(string.format("look in %s", container))
    end
    
    SendNoEcho("echo {/cards}")
    TelnetOptionOn(TELOPT_PAGING) -- Re-enable paging if it was on
end

function CardHandler.found(trigger, line, wc)
    table.insert(CardHandler.cards, line)
end

function CardHandler.search_done(trigger, line, wc)
    EnableTriggerGroup("triggerg_card_search", false)
    Remote.upload_cards(CardHandler.cards)
end

function CardHandler.remove(trigger, line, wc)
    local card = trim(wc.card)
    if (card == "") then
        Utility.msg_prim("Remove which card?")
        return
    end
    
    Remote.remove_card(card)
end
]]>
</script>



<aliases>
    <!-- sequence 101 to evaluate after card upload alias -->
    <alias
     match="^winds\s+(?<action>remove|upload)(?<keywords>.*)$"
     enabled="y"
     script="CaseHandler.search"
     regexp="y"
     ignore_case="y"
     sequence="101"
    >
    </alias>
</aliases>

<triggers>
    <trigger
     name="trigger_case_keywords"
     group="triggerg_case_search"
     match="^\|\s+Keywords\s+:(?<keywords>.+)\|$"
     enabled="n"
     script="CaseHandler.found_keywords"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     name="trigger_case_id"
     group="triggerg_case_search"
     match="^\|\s+Id\s+:(?<id>.+)\|$"
     enabled="n"
     script="CaseHandler.found_id"
     regexp="y"
     sequence="100"
    >
    </trigger>
    <trigger
     name="trigger_case_search_done"
     group="triggerg_case_search"
     match="^\{/(?<action>rm|up)case\}$"
     enabled="n"
     script="CaseHandler.search_done"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    >
    </trigger>
</triggers>

<script>
<![CDATA[
--------------------------------------------------
-- Case Handler
--------------------------------------------------

CaseHandler = {}

function CaseHandler.search(alias, line, wc)
    local action = wc.action
    local keywords = trim(wc.keywords)
    if (keywords == "") then
        Utility.msg_prim(string.format("%s what case?", Utility.pascal_case(action)))
        return
    end
    
    CaseHandler.cases = {}
    EnableTrigger("trigger_case_keywords", true)
    EnableTrigger("trigger_case_search_done", true)
    
    for keyword in keywords:gmatch("%S+") do
        SendNoEcho(string.format("identify %s", keyword))
    end
    
    local shortAction = action:lower() == "upload" and "up" or "rm"
    SendNoEcho(string.format("echo {/%scase}", shortAction))
end

function CaseHandler.found_keywords(trigger, line, wc)
    if (not line:match("case collector[1-4] %d+ %d+ NO_RESTRING")) then
        return -- Not a Winds case.
    end
    table.insert(CaseHandler.cases, line)
    EnableTrigger("trigger_case_id")
end

function CaseHandler.found_id(trigger, line, wc)
    -- This trigger is active only when we've already found a case,
    -- so no need to do any checks.
    table.insert(CaseHandler.cases, line)
    EnableTrigger(trigger, false)
end

function CaseHandler.search_done(trigger, line, wc)
    EnableTriggerGroup("triggerg_case_search", false)
    -- Need an even number of elements, keyword and id for each case.
    if (#CaseHandler.cases == 0 or #CaseHandler.cases % 2 == 1) then
        Utility.msg_prim("No Winds cases found.")
        return
    end
    
    if (wc.action == "up") then
        Remote.upload_cases(CaseHandler.cases)
    elseif (wc.action == "rm") then
        Remote.remove_case(CaseHandler.cases)
    end
end
]]>
</script>



<aliases>
    <alias
     match="^winds\s+forcecreate$"
     enabled="y"
     script="Remote.force_create"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^winds\s+trades\s+(?<cases>\d+)(?<with>\s+\w+)?$"
     enabled="y"
     script="Remote.display_trades"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^winds\s+update$"
     enabled="y"
     script="Remote.update_plugin"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>

<script>
<![CDATA[
local https = require "ssl.https"
require "json"
local ltn12 = require "ltn12"

--------------------------------------------------
-- Remote
--------------------------------------------------

Remote = {}

function Remote.initialize()
    Remote.API = "https://winds.aarderik.nl/api.php/p/"
end

function Remote.get(url)
    local response = {}
    local ret, code, headers, status = https.request{
        ["url"] = url,
        ["method"] = "GET",
        ["headers"] = {
            ["Content-Type"] = "application/x-www-form-urlencoded",
        },
        ["sink"] = ltn12.sink.table(response)
    }
    if (response[1]) then -- Got response
        return json.decode(table.concat(response, ""))
    end
    return nil
end

function Remote.post(url, data)
    data = data or ""
    local response = {}
    local ret, code, headers, status = https.request{
        ["url"] = url,
        ["method"] = "POST",
        ["headers"] = {
            ["Content-Type"] = "application/x-www-form-urlencoded",
            ["Content-Length"] = #data,
        },
        ["source"] = ltn12.source.string(data),
        ["sink"] = ltn12.sink.table(response)
    }
    if (response[1]) then -- Got response
        return json.decode(table.concat(response, ""))
    end
    return nil
end

function Remote.create_char(name)
    local success = false
    if (not name) then
        Utility.msg_prim("Character creation failed. No name given.")
        Config.set("created", success)
        return success
    end
    
    name = trim(name)
    if (name == "") then
        Utility.msg_prim("Character creation failed. No name given.")
        Config.set("created", success)
        return success
    end
    
    local url = string.format("%s%s/create", Remote.API, name)
    Utility.msg_prim(string.format("Creating character %s...", name))
    local response = Remote.post(url)
    if not (response and response.success) then
        Utility.msg_prim("Character creation failed. Server error.")
        Config.set("created", success)
        return success
    end
    
    success = true
    Config.set("created", success)
    Utility.msg_prim(string.format("Character creation for %s succeeded.", name))
    return success
end

function Remote.char_exists(name)
    -- Ensure char exists before trying to send/get any data. If it does not
    -- exist, we create it.
    local exists = true
    if not (Config.get("created") or Remote.create_char(name)) then
        exists = false
    end
    return exists
end

function Remote.force_create(alias, line, wc)
    local name = GMCP.char_name()
    Config.set("created", false)
    Remote.create_char(name)
end

function Remote.upload_cards(cards)
    local name = GMCP.char_name()
    if (not name or name == "") then
        Utility.msg_prim("Unable to upload cards. GMCP data not available.")
        return false
    end
    
    if (#cards == 0) then
        Utility.msg_prim("No extra cards found.")
        return false
    end
    table.sort(cards)
    
    if (not Remote.char_exists(name)) then
        Utility.msg_prim("Unable to upload cards.")
        return false
    end
    
    local url = string.format("%s%s/upcard", Remote.API, name)
    local data = string.format("cards=%s", table.concat(cards, "\n")) 
    local response = Remote.post(url, data)
    if not (response and response.success) then
        Utility.msg_prim("Failed to upload extra cards.")
        return false
    end
    
    -- Change `cards` to `card` in result message if quantity is 1...
    local msg = response.result
    local quantity = tonumber(msg:match("^(%d+)"))
    if (quantity == 1) then
        msg = msg:gsub("cards", "card")
    end
    
    Utility.msg_prim(msg)
    Remote.offer_trades()
    return true
end

function Remote.remove_card(card)
    local name = GMCP.char_name()
    if (not name or name == "") then
        Utility.msg_prim("Unable to remove cards. GMCP data not available.")
        return false
    end
    
    if (not Remote.char_exists(name)) then
        Utility.msg_prim("Unable to remove cards.")
        return false
    end
    
    local url = string.format("%s%s/rmcard/%s", Remote.API, name, card)
    local response = Remote.post(url)
    if not (response) then
        Utility.msg_prim("Failed to remove card.")
        return false
    end
    
    if (response.errstr) then
        local msg = response.errstr:gsub("rmcard: ", "")
        Utility.msg_prim(msg)
        return false
    end
    
    Utility.msg_prim(response.result)
    Remote.offer_trades()
    return true
end

function Remote.upload_cases(cases)
    local name = GMCP.char_name()
    if (not name or name == "") then
        Utility.msg_prim("Unable to upload cases. GMCP data not available.")
        return false
    end
    
    if (not Remote.char_exists(name)) then
        Utility.msg_prim("Unable to upload cases.")
        return false
    end
    
    local url = string.format("%s%s/upcase", Remote.API, name)
    local data = string.format("cases=%s", table.concat(cases, "\n")) 
    local response = Remote.post(url, data)
    if not (response and response.success) then
        Utility.msg_prim("Failed to upload cases.")
        return false
    end
    
    -- Success can return `0 cases uploaded` if the cases already exist. Change
    -- this message to something more user-friendly.
    local msg = response.result
    local quantity = tonumber(msg:match("^(%d+)"))
    if (quantity == 0) then
        quantity = #cases / 2
        local new = string.format("%d case%s", quantity, quantity > 1 and "s" or "")
        msg = msg:gsub("0 cases", new)
    end
    
    Utility.msg_prim(msg)
    Remote.offer_trades()
    return true
end

function Remote.remove_case(cases)
    local name = GMCP.char_name()
    if (not name or name == "") then
        Utility.msg_prim("Unable to remove cases. GMCP data not available.")
        return false
    end
    
    if (#cases < 2) then
        Utility.msg_prim("No Winds cases found.")
        return false
    end
    
    if (not Remote.char_exists(name)) then
        Utility.msg_prim("Unable to remove cases.")
        return false
    end
    
    local id = cases[2]:match("%d+")
    local url = string.format("%s%s/rmcase/%s", Remote.API, name, id)
    local response = Remote.post(url)
    if not (response) then
        Utility.msg_prim("Failed to remove case.")
        return false
    end
    
    if (response.errstr) then
        Utility.msg_prim("No such case found.")
        return false
    end
    
    Utility.msg_prim(response.result)
    Remote.offer_trades()
    return true
end

function Remote.display_trades(alias, line, wc)
    local name = GMCP.char_name()
    if (not name or name == "") then
        Utility.msg_prim("Unable to retrieve trades. GMCP data not available.")
        return false
    end
    
    if (not Remote.char_exists(name)) then
        Utility.msg_prim("Unable to retrieve trades.")
        return false
    end
    
    local caseNums = wc.cases
    local url = string.format("%s%s/trades/%s", Remote.API, name, caseNums)
    local with = trim(wc.with)
    if (with ~= "") then
        url = string.format("%s?with=%s", url, with)
    else
        local daysAgo = Config.get("daysAgo")
        if (daysAgo > 0) then
            url = string.format("%s?days_ago=%d", url, daysAgo)
        end
    end
    
    local response = Remote.get(url)
    if (not response) then
        Utility.msg_prim("Failed to retrieve trades.")
        return false
    end
    
    if (response.errstr) then
        local msg = response.errstr:gsub("trades: ", "")
        Utility.msg_prim(msg)
        return false
    end
    
    -- Build our own table of cases, since response.cases has string keys and
    -- can't be sorted
    local cases = {}
    for caseNum, caseInfo in pairs(response.cases) do
        cases[tonumber(caseNum)] = caseInfo
    end
    
    local caseDisplayed = false
    for caseNum, caseInfo in pairs(cases) do
        caseDisplayed = true
        local header = string.format("@WTrades for case%d (@Y%s@W)", caseNum, caseInfo.name)
        local headerIndent = math.floor((80 - #strip_colours(header)) / 2)
        Utility.print(string.format("%s%s", string.rep(" ", headerIndent), header))
        
        -- Collect player names so we can display them alphabetically
        local players = {}
        for player, trades in pairs(caseInfo.trades) do
            table.insert(players, player)
        end
        table.sort(players)
        
        -- Now run through each player and display their trades (if any)
        for _, player in ipairs(players) do
            -- Look for updated first in player table (not always sent). Otherwise,
            -- look for it in top-level other_player table (sent when requesting
            -- another player). If both fail, default to 'N/A'
            local updated = caseInfo.trades[player].updated
                or (response.other_player and response.other_player.updated)
                or "N/A"
            local give = Utility.remove_duplicates(caseInfo.trades[player].give)
            local recv = Utility.remove_duplicates(caseInfo.trades[player].recv)
            -- Display only players who can either give or receive cards
            if (#give > 0 or #recv > 0) then
                Utility.print(string.format("@W%s @w(%s):", player, updated))
                if (#give > 0) then
                    Utility.print(string.format("   @YNeeds@w: %s", table.concat(give, ", ")))
                end -- can give
                if (#recv > 0) then
                    Utility.print(string.format("   @YHas  @w: %s", table.concat(recv, ", ")))
                end -- can receive
            end -- can either give or receive
        end -- for each player
    end -- for each case
    
    if (not caseDisplayed) then
        Utility.msg_prim("NO trades available.")
    end
    
    return true
end

function Remote.update_plugin(alias, line, wc)
    local url = "https://raw.githubusercontent.com/AreiaAard/Winds_Trader/main/winds_trader.xml"
    local xml = https.request(url)
    if (not xml) then
        Utility.msg_prim("Failed to download remote plugin file.")
        return false
    end
    
    local pluginID = GetPluginID()
    local localVersion = GetPluginInfo(pluginID, 19) or 0
    local localVersionStr = string.format("%1.2f", localVersion)
    local remoteVersionStr = xml:match('%s%s+version="([0-9%.]+)"')
    local remoteVersion = tonumber(remoteVersionStr or "") or 0
    
    if (localVersion == remoteVersion) then
        Utility.msg_prim("Version is up to date.")
        return true
    end
    
    Utility.msg_prim(string.format("Updating from v%s to v%s...",
        localVersionStr, remoteVersionStr
    ))
    Utility.msg_sec("Please do not touch anything.")
    local fileName = GetPluginInfo(pluginID, 6)
    local file = assert(io.open(fileName, "w"))
    file:write(xml)
    file:close()
    Utility.reload_plugin()
    return true
end

function Remote.offer_trades()
    local name = GMCP.char_name()
    if (not name or name == "") then
        return false
    end
    
    local action = "https://winds.aarderik.nl/index.php?player=" .. name
    local text = "here"
    local hint = "Open " .. action
    local fgPlain = "silver"
    local fgHighlight = "yellow"
    local bg = "black"
    local url = true
    local noUnderline = false
    local indent = string.rep(" ", 16)
    Tell(indent)
     ColourTell(fgPlain, bg, "Click ")
    Hyperlink(action, text, hint, fgHighlight, bg, url, noUnderline)
    ColourTell("silver", "black", " to view your trades on the trading site.")
    Note("")
    
    action = "winds trades 1234"
    text = "winds trades <cases>"
    hint = "View trades here"
    url = false
    Tell(indent)
    ColourTell(fgPlain, bg, "Or submit ")
    Hyperlink(action, text, hint, fgHighlight, bg, url, noUnderline)
    ColourTell(fgPlain, bg, " to view trades here.")
    Note("")
    
    return true
end
]]>
</script>



<aliases>
    <alias
     match="^winds\s+search\s+market$"
     enabled="y"
     script="Search.lbid"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>

<triggers>
    <trigger
     group="found_winds_lbid"
     match="^Num    Item Description             Lvl  Type Last Bid      Bids Time Left$"
     enabled="n"
     script="Search.lbid_header"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="found_winds_lbid"
     match="^------ ---------------------------- --- ----- ------------- ---- -------------$"
     enabled="n"
     script="Search.lbid_bar"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="found_winds_lbid"
     match="^[\s\*]+(?<num>\d{1,5})\s+(?<item>.{28})\s+(?<level>\d{1,3})\s+(?<buyout>\*?)(?<type>Gold|Qp)\s+(?<lastBid>[\d,]{1,13})\s+(?<bids>\d{1,4})\s+(?<timeLeft>.+)$"
     enabled="n"
     script="Search.lbid_item"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    >
    </trigger>
    <trigger
     group="found_winds_lbid"
     match="^------------------------------------------------------------------------------$"
     enabled="n"
     script="Search.lbid_footer"
     regexp="y"
     omit_from_output="y"
     sequence="100"
    >
    </trigger>
</triggers>

<script>
<![CDATA[
--------------------------------------------------
-- Card Searching
--------------------------------------------------

Search = {}

Search.cards = {
    ["Abelinc"] = 2, ["Adam"] = 2, ["Aisis"] = 3, ["Alessandrew"] = 1,
    ["Alhena"] = 1, ["Althalus"] = 4, ["Anaristos"] = 4, ["Andersen"] = 3,
    ["Androg"] = 1, ["Ani"] = 1, ["Arist"] = 2, ["Arius"] = 3,
    ["Arthon"] = 3, ["Baejita"] = 4, ["Baktosh"] = 2, ["Banichi"] = 4,
    ["Barchetta"] = 3, ["Barid"] = 3, ["Bejito"] = 1, ["Belmont"] = 3,
    ["Blug"] = 2, ["Blunt"] = 2, ["Blurp"] = 1, ["Bonjour"] = 1,
    ["Breeze"] = 3, ["Broud"] = 4, ["Cadaver"] = 1, ["Candace"] = 3,
    ["Cartman"] = 1, ["Cassin"] = 4, ["Cerridwen"] = 3, ["Chich"] = 2,
    ["Chuft"] = 1, ["Citron"] = 4, ["Claire"] = 4, ["Confusion"] = 3,
    ["Cordelia"] = 1, ["Corliss"] = 2, ["Craven"] = 1, ["Curi"] = 1,
    ["Cynic"] = 4, ["Dachande"] = 2, ["Dadrake"] = 4, ["DagasWolf"] = 3,
    ["Dagonet"] = 1, ["Danj"] = 2, ["Darkmoore"] = 4, ["Dave"] = 1,
    ["Deadman"] = 2, ["Delgar"] = 2, ["Delight"] = 3, ["Demonspawn"] = 1,
    ["Dereliction"] = 1, ["Dexter"] = 1, ["Dexx"] = 2, ["Dhamon"] = 3,
    ["Dirtworm"] = 3, ["DjVoltron"] = 1, ["Domain"] = 1, ["Dreamfyre"] = 4,
    ["Eclaboussure"] = 3, ["Edit"] = 2, ["Elisa"] = 4, ["Entreri"] = 4,
    ["Erikson"] = 2, ["Euphonix"] = 3, ["Evie"] = 1, ["FatesDagger"] = 1,
    ["Fetard"] = 2, ["Fiendish"] = 2, ["FieryFlame"] = 3, ["Filt"] = 3,
    ["Freddie"] = 2, ["Fufa"] = 4, ["Galinthas"] = 1, ["Gangar"] = 3,
    ["Gastro"] = 2, ["Geneve"] = 4, ["Ghaan"] = 3, ["Glimmer"] = 3,
    ["Gren"] = 1, ["Guinness"] = 4, ["Halo"] = 3, ["Hank"] = 1,
    ["Harvester"] = 4, ["Hiroki"] = 1, ["Icecool"] = 2, ["Iceman"] = 2,
    ["Ikyu"] = 3, ["Ixultar"] = 2, ["Jaenelle"] = 3, ["Jennie"] = 1,
    ["Jernau"] = 3, ["Juli"] = 3, ["JustMe"] = 4, ["Kaitlyn"] = 3,
    ["Kalince"] = 4, ["Kharpern"] = 4, ["Khelda"] = 3, ["Kinson"] = 3,
    ["Koala"] = 2, ["Korridel"] = 4, ["Kt"] = 3, ["Kya"] = 2,
    ["Lamoxes"] = 3, ["Lao"] = 4, ["Laren"] = 4, ["Lasher"] = 4,
    ["Leaf"] = 1, ["Level"] = 2, ["Liber"] = 2, ["Linoge"] = 1,
    ["Llarian"] = 3, ["Lumina"] = 1, ["Madcatz"] = 1, ["Madrox"] = 1,
    ["Maerchyng"] = 4, ["Majic"] = 1, ["Marauder"] = 1, ["Marc"] = 1,
    ["Marcon"] = 4, ["Mars"] = 2, ["Martin"] = 3, ["Mashai"] = 4,
    ["Mendaloth"] = 2, ["Metallica"] = 3, ["Methdemon"] = 4, ["Milquetoast"] = 2,
    ["Mique"] = 2, ["Mirrim"] = 2, ["Moolb"] = 1, ["Moons"] = 4,
    ["Moradin"] = 2, ["Mordist"] = 3, ["Morn"] = 2, ["Nasus"] = 2,
    ["Natallia"] = 3, ["Neeper"] = 3, ["Ninja"] = 1, ["Nocilis"] = 2,
    ["Obyron"] = 4, ["Oladon"] = 1, ["OrcWarrior"] = 4, ["Original"] = 1,
    ["Orsiphantes"] = 3, ["Paipals"] = 2, ["Pane"] = 3, ["Paramore"] = 4,
    ["Penthesilea"] = 4, ["Pleiades"] = 2, ["Pointless"] = 4, ["Portia"] = 2,
    ["Psychopath"] = 3, ["Pudge"] = 4, ["Pumpkin"] = 2, ["Quadrapus"] = 1,
    ["Rafaele"] = 1, ["Rau"] = 1, ["Razor"] = 2, ["Redryn"] = 2,
    ["Rezit"] = 1, ["Rhuli"] = 4, ["Robbo"] = 2, ["Rocky"] = 1,
    ["Roell"] = 3, ["Rojaz"] = 2, ["Ruiner"] = 1, ["Rumour"] = 4,
    ["Saartje"] = 1, ["Sagen"] = 4, ["Sarlock"] = 3, ["Senja"] = 3,
    ["ShadowFax"] = 3, ["Sirene"] = 4, ["Skarren"] = 4, ["Slith"] = 2,
    ["SonRokito"] = 2, ["Songbird"] = 3, ["Speedster"] = 1, ["Stormlord"] = 1,
    ["Styliann"] = 4, ["Sunset"] = 4, ["Sylvain"] = 4, ["Synthesizer"] = 3,
    ["Tallie"] = 3, ["Tela"] = 4, ["Tenchi"] = 4, ["Teoyaomqui"] = 4,
    ["Terrill"] = 3, ["Testasterone"] = 4, ["Thirstan"] = 3, ["Timeghost"] = 4,
    ["Tinada"] = 2, ["Tirica"] = 1, ["TrEz"] = 1, ["Trachx"] = 2,
    ["Tripitaka"] = 3, ["Trollemite"] = 1, ["Trurien"] = 2, ["Turie"] = 2,
    ["Tyanon"] = 3, ["Tymme"] = 3, ["Tzitzimime"] = 2, ["Uncival"] = 3,
    ["Unforgiven"] = 2, ["Valkur"] = 4, ["Vanion"] = 1, ["Velvet"] = 4,
    ["Vesuvius"] = 4, ["Vilgan"] = 4, ["Vitae"] = 4, ["Wars"] = 2,
    ["Whisper"] = 1, ["Whitdjinn"] = 2, ["Wire"] = 2, ["Wojmil"] = 1,
    ["Wolfe"] = 3, ["Xantcha"] = 3, ["Xeno"] = 4, ["Yandros"] = 4,
    ["Yowza"] = 1, ["Zengo"] = 2, ["Zolstead"] = 1, ["Zoot"] = 2,
}


function Search.lookup(name)
    return Search.cards[name]
end

function Search.lbid(alias, line, wc)
    EnableTriggerGroup("found_winds_lbid", true)
    TelnetOptionOff(TELOPT_PAGING) -- Temporarily disable paging if it is on
    Send("market search 201 201 treasure")
    TelnetOptionOn(TELOPT_PAGING) -- Re-enable paging if it was on
end

function Search.lbid_header(trigger, line, wc, styles)
    local textColor = "cyan"
    local backColor = "black"
    for _, style in ipairs(styles) do
        textColor = RGBColourToName(style.textcolour)
        backColor = RGBColourToName(style.backcolour)
        ColourTell(textColor, backColor, style.text)
    end
    -- Borrow colors from last style run.
    ColourTell(textColor, backColor, "     Case")
    Note()
end

function Search.lbid_bar(trigger, line, wc, styles)
    local textColor = "white"
    local backColor = "black"
    for _, style in ipairs(styles) do
        textColor = RGBColourToName(style.textcolour)
        backColor = RGBColourToName(style.backcolour)
        ColourTell(textColor, backColor, style.text)
    end
    -- Borrow colors from last style run.
    ColourTell(textColor, backColor, " --------")
    Note()
end 

function Search.lbid_item(trigger, line, wc, styles)
    local card = wc.item:match("^(%w+) Fantasy Series")
    local case = Search.lookup(card)
    if (not case) then
        -- Item is not a Winds card. The trigger omits the line, but
        -- otherwise no need to do anything.
        return
    end

    for _, style in ipairs(styles) do
        local textColor = RGBColourToName(style.textcolour)
        local backColor = RGBColourToName(style.backcolour)
        ColourTell(textColor, backColor, style.text)
    end
    ColourTell(
        "cyan", "", " (",
        "white", "", "Case ",
        "white", "", case,
        "cyan", "", ")"
    )
    Note()
end

function Search.lbid_footer(trigger, line, wc, styles)
    EnableTriggerGroup("found_winds_lbid", false)
    local textColor = "white"
    local backColor = "black"
    for _, style in ipairs(styles) do
        textColor = RGBColourToName(style.textcolour)
        backColor = RGBColourToName(style.backcolour)
        ColourTell(textColor, backColor, style.text)
    end
    -- Borrow colors from last style run.
    ColourTell(textColor, backColor, "---------")
    Note()
end 
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- GMCP
--------------------------------------------------

GMCP = {}

function GMCP.char_name()
    return gmcp("char.base.name")
end
]]>
</script>



<aliases>
    <alias
     match="^winds\s+tradehelp$"
     enabled="y"
     script="Help.topics"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^winds\s+tradehelp\s+(?<topic>\w+)$"
     enabled="y"
     script="Help.show_topic"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>

<script>
<![CDATA[
--------------------------------------------------
-- Help
--------------------------------------------------

Help = {}

function Help.topics()
    local topics = {
        {name="config", desc="Configuring the plugin"},
        {name="upload", desc="Uploading cases and cards"},
        {name="remove", desc="Removing cases and cards"},
        {name="trades", desc="Displaying trades"},
        {name="misc", desc="Misc commands"},
    }
    
    local fgPlain = "silver"
    local fgHighlight = "yellow"
    local bg = "black"
    Utility.print("              @WWinds Trader Help -- Help Topics              ")
    Utility.print(string.rep("=", 60))
    for _, topic in ipairs(topics) do
        local action = "winds tradehelp " .. topic.name
        local text = "winds tradehelp " .. topic.name
        local hint = string.format("Show %s help", topic.name)
        Tell("  ")
        Hyperlink(action, text, hint, fgHighlight, bg, false)
        ColourTell(fgPlain, bg, ": ", fgPlain, bg, topic.desc)
        Note("")
    end
    Utility.print("Type or click on one of the above to show help.")
end

function Help.show_topic(alias, line, wc)
    local topics = {
        ["config"] = Help.config, ["upload"] = Help.upload,
        ["remove"] = Help.remove, ["trades"] = Help.trades,
        ["misc"] = Help.misc,
    }
    local function no_topic()
        Utility.msg_prim("No help topic with that name.")
        Help.topics()
    end
    
    local topic = string.lower(wc.topic)
    local func = topics[topic] or no_topic
    func()
end

function Help.config()
    Utility.print("                @WWinds Trader Help -- Config@w                ")
    Utility.print(string.rep("=", 60))
    local text = [[
    Syntax: @Ywinds config <config> <value>@w
This command sets configuration options for the plugin.
Available configs:
  limittrades: Limit display of trades to players active
    within the given number of days.
    Example: @Ywinds config limittrades 30 @w--> Show only
      players active within the last month.
    Example: @Ywinds config limittrades 0 @w--> Show trades
      with all players, regardless of activity.
]]
    Utility.print(text)
end

function Help.upload()
    Utility.print("                @WWinds Trader Help -- Upload@w                ")
    Utility.print(string.rep("=", 60))
    local text = [[
    Syntax: @Ywinds upload <case(s)>@w
    Syntax: @Ywinds upload cards [location(s)]@w
These commands allow you to upload your cases and cards to
the winds trading site.
To upload a case, have it in your inventory, and simply
type @Ywinds upload case@w. If you have more than one, you can
seperate each with whitespace. For example, to upload three
different cases, submit @Ywinds upload case 2.case 3.case@w.
To upload duplicate cards in your inventory, submit
@Ywinds upload cards@w. If your dupes are in a bag, simply add
the bag's name or id. e.g., @Ywinds upload cards 2.bag@w.
You may upload cards from multiple locations by separating
each with whitespace. For example, to upload all cards
found in 1.bag and 2.bag: @Ywinds upload cards 1.bag 2.bag@w.
To include the main inventory in the search, use the @Yinv@w
keyword. To include your vault contents, use @Yvault@w. e.g.,
@Ywinds upload cards inv vault 2.bag @wsearches your main inv,
your vault, and your second bag.
The plugin offers to show you trades after every upload
operation. You can click the links it provides for quick
access to your trades.
]]
    Utility.print(text)
end

function Help.remove()
    Utility.print("                @WWinds Trader Help -- Remove@w                ")
    Utility.print(string.rep("=", 60))
    local text = [[
    Syntax: @Ywinds remove <case>@w
    Syntax: @Ywinds remove card <card name>@w
If you complete a case, or trade away a duplicate, you will
want to remove it from your profile. these commands do just
that.
Case removal works similarly to case uploading. Ensure that
the case is in your inventory, and type, for example,
@Ywinds remove collector4@w.
Duplicate removal is currently done one-by-one. To remove
a Lasher card, you would type @Ywinds remove card lasher@w
(names are case-insensitive).
The plugin offers to show you trades after every remove
operation. You can click the links it provides for quick
access to your trades.
]]
    Utility.print(text)
end

function Help.trades()
    Utility.print("                @WWinds Trader Help -- Trades@w                ")
    Utility.print(string.rep("=", 60))
    local text = [[
    Syntax: @Ywinds trades <case number(s)> [player]@w
This command allows you to view your trades without having
to look on the trading site (although it's probably vis-
ually easier to do so).
Case numbers are 1 through 4 and refer to the cases for
which you wish to search trades. Typing @Ywinds trades 3@w
will display trades you can make with your case3 cards. It
is possible to view multiple cases at once. For example,
@Ywinds trades 14 @wshows trades for cases 1 and 4, and to see
all possible trades, you can submit @Ywinds trades 1234@w.
Adding a player's name at the end of the command will limit
your search to trades with only that particular player.
This can be useful if you develop a regular trading part-
ner, or simply to cut down on spam.
]]
    Utility.print(text)
end

function Help.misc()
    Utility.print("                 @WWinds Trader Help -- Misc@w                 ")
    Utility.print(string.rep("=", 60))
    local text = [[
Below are some various minor plugin commands which should
not necessarily be needed often.
  @Ywinds forcecreate@w: Forces the plugin to attempt to create
    a profile with your name. The plugin does this for you
    automatically, but in the case things get confused and
    the trading site forgets that you exist, you can try
    this.
  @Ywinds update@w: Checks for an updated version of the plugin
    and installs it if found.
]]
    Utility.print(text)
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Utility
--------------------------------------------------

Utility = {}

function Utility.initialize()
    local modules = {
        Config,
        Remote,
    }
    for _, module in ipairs(modules) do
        if (module.initialize) then
            module.initialize()
        end
    end
end

function Utility.deinitialize()
end

function Utility.print(str)
    -- Lets us use Aard color codes in our ColourNotes
    AnsiNote(stylesToANSI(ColoursToStyles(string.format("@w%s@w", str))))
end

function Utility.msg_prim(str, ...)
    Utility.print(string.format("[@YWinds Trader@w]: %s", str))
    for _, msg in ipairs{...} do
        Utility.second_msg(msg)
    end
end

function Utility.msg_sec(str)
    Utility.print(string.format("                %s", str))
end

function Utility.pascal_case(str)
    str = str:gsub("(%a)([%w_']*)",
        function(first,remainder)
            return string.format("%s%s", first:upper(), remainder:lower())
        end
    )
    return str
end

function Utility.starts_with(s, t)
    if not (type(s) == "string" and type(t) == "string") then
        return false
    end
    return s:sub(1, #t) == t
end

function Utility.ends_with(s, t)
    return Utility.starts_with(s:reverse(), t:reverse())
end

function Utility.remove_duplicates(t)
    local found = {}
    local new = {}
    for k, v in ipairs(t) do
        if (not found[v]) then
        found[v] = true
        table.insert(new, v)
        end
    end
    return new
end

function Utility.reload_plugin()
    if (GetAlphaOption("script_prefix") == "") then
        SetAlphaOption("script_prefix", "\\\\\\")
    end
    local scriptPrefix = GetAlphaOption("script_prefix")
    local pluginID = GetPluginID()
    local cmd = "%sDoAfterSpecial(1, \"ReloadPlugin('%s')\", sendto.script)"
    Utility.msg_prim("Reloading...")
    Execute(cmd:format(scriptPrefix, pluginID))
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Plugin Callbacks
--------------------------------------------------

function OnPluginInstall()
    Utility.initialize()
    Utility.msg_prim("Plugin installed. Submit @Ywinds tradehelp @wfor help topics.")
end

function OnPluginEnable()
    OnPluginInstall()
end

function OnPluginClose()
    Utility.deinitialize()
end

function OnPluginDisable()
    OnPluginClose()
end

function OnPluginBroadcast(msg, id, name, text)
    if (id == "3e7dedbe37e44942dd46d264") then
    end
end
]]>
</script>


</muclient>
